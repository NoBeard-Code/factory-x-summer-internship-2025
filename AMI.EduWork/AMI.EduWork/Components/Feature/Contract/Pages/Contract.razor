@page "/contracts"
@using AMI.EduWork.Domain.Interfaces.Service
@using AMI.EduWork.Domain.Models.ContractModel
@rendermode InteractiveServer
@inject NavigationManager NavigationManager

<PageTitle>Contracts</PageTitle>

<h1>Contracts</h1>

@if (_contractGetByIdModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="contracts/add">Create contract</MudButton>

    <MudTable Items="@_contractGetByIdModel" Hover="true" SortLabel="Sort By">
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ContractGetModel, object>(x => x._GetUserModel.UserName)">User</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ContractGetModel, object>(x => x.WorkingHour)">Working Hour</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ContractGetModel, object>(x => x.HourlyRate)">Hourly Rate</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ContractGetModel, object>(x => x.IsActive)">Is Active?</MudTableSortLabel></MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nr">@context._GetUserModel.UserName</MudTd>
            <MudTd DataLabel="Sign">@context.WorkingHour</MudTd>
            <MudTd DataLabel="Name">@context.HourlyRate</MudTd>
            <MudTd DataLabel="Position">@context.IsActive</MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Info" onclick="(async () => await UpdateContract(context.Id))">Update</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" onclick="(async () => await DeleteContract(context.Id))">Delete</MudButton>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
        </PagerContent>
    </MudTable>

}
@inject IContractService icontractService
@code {
    private List<ContractGetModel>? _contractGetByIdModel;

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<ContractGetModel>? contractGetByIdModel = await icontractService.GetAll();
        _contractGetByIdModel = contractGetByIdModel.ToList();

    }

    private async Task DeleteContract(string id)
    {
        await icontractService.Delete(id);
        ContractGetModel? contractGetByIdModel = _contractGetByIdModel?.FirstOrDefault(x => x.Id==id);
        if (contractGetByIdModel is not null) _contractGetByIdModel!.Remove(contractGetByIdModel);
    }
    private async Task UpdateContract(string contractId)
    {
        NavigationManager.NavigateTo($"/contracts/update/{contractId}");
    }
    private async Task CreateContract()
    {
        NavigationManager.NavigateTo($"/contracts/add");
    }
}

@using AMI.EduWork.Domain.Interfaces.Service
@using AMI.EduWork.Domain.Models.TimeSlice
@inject IServiceScopeFactory ServiceScopeFactory
@inject IDialogService DialogService

<MudPaper Class="pa-2" Outlined="true" Style="min-width:200px; width:100%;">
    <MudGrid>
        <MudItem xs="6">
            <MudText Typo="Typo.subtitle2" Bold="true">@((TimeSlice.Project != null) ? TimeSlice.Project.Name : "Not set")</MudText>

        </MudItem>
        <MudItem xs="6" Align="Right" Style="display: flex; align-items: center; justify-content: flex-end;">
            <MudText Typo="Typo.subtitle2" Style="margin-right: 8px;">
                @(TimeSlice.Start.HasValue? TimeSlice.Start.Value.ToString("hh:mm tt") : "--:--") - @(TimeSlice.End.HasValue? TimeSlice.End.Value.ToString("hh:mm tt") : "--:--")
            </MudText>
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteTimeSlice" />
            <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Edit" OnClick="EditClicked" />
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2">@TimeSlice.Description</MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter]
    public GetTimeSliceModel TimeSlice { get; set; }

    private async Task DeleteTimeSlice()
    {
        using var scope = ServiceScopeFactory.CreateScope();
        var _timeSliceService = scope.ServiceProvider.GetRequiredService<ITimeSliceService>();
        await _timeSliceService.DeleteById(TimeSlice.Id);
    }

    [Parameter]
    public EventCallback<GetTimeSliceModel> OnEditRequested { get; set; }

    private async Task EditClicked()
    {
        await OnEditRequested.InvokeAsync(TimeSlice);
    }
}

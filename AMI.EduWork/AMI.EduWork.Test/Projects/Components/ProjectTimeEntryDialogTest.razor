@inherits TestContext

@using System
@using System.Collections.Generic
@using System.Reflection
@using System.Threading.Tasks
@using AMI.EduWork.Domain.Models.WorkDay
@using Bunit
@using Xunit
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using MudBlazor.Services
@using AMI.EduWork.Domain.Models.User
@using AMI.EduWork.Domain.Models.Project
@using AMI.EduWork.Domain.Models.TimeSlice
@using AMI.EduWork.Components.Feature.Project.Components

@code {
    
    public ProjectTimeEntryDialogTest()
    {
        Services.AddMudServices();
        
    }

    
    private void SetInternalId<T>(T obj, string propName, string value)
    {
        var prop = typeof(T)
            .GetProperty(propName, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)!;
        prop.SetValue(obj, value);
    }

    private GetUserModel CreateTestUser()
    {
        var user = new GetUserModel
        {
            UserName = "test.user",
            Email    = "test@example.com",
            Role     = 1
        };
        SetInternalId(user, nameof(GetUserModel.Id), Guid.NewGuid().ToString());
        return user;
    }

    private GetProjectModel CreateSampleProject() =>
        new GetProjectModel
        {
            Id            = Guid.NewGuid().ToString(),
            Name          = "Test Project",
            Description   = "Project for unit tests",
            TypeOfProject = 1
        };

    private GetTimeSliceModel CreateSampleTimeSlice(GetProjectModel project)
    {
        var user = CreateTestUser();

        var workDay = new GetWorkDayModel
        {
            Date = new DateTime(2025, 1, 1)
        };
        SetInternalId(workDay, nameof(GetWorkDayModel.Id), Guid.NewGuid().ToString());

        var slice = new GetTimeSliceModel
        {
            Start       = new DateTime(2025, 1, 1, 9, 0, 0),
            End         = new DateTime(2025, 1, 1, 10, 30, 0),
            TypeOfSlice = 0,
            UserId      = user.Id,
            User        = user,
            WorkDayId   = workDay.Id,
            WorkDay     = workDay,
            Project     = new GetProjectModelNoRefrences
            {
                Id            = project.Id,
                Name          = project.Name,
                Description   = project.Description,
                TypeOfProject = project.TypeOfProject
            }
        };
        SetInternalId(slice, nameof(GetTimeSliceModel.Id), Guid.NewGuid().ToString());
        return slice;
    }

    [Fact]
    public void ShowsTimeSliceWithFormattedDuration()
    {
        // Arrange
        var project = CreateSampleProject();
        var slice   = CreateSampleTimeSlice(project);
        var slices  = new List<GetTimeSliceModel> { slice };

       
        var cut = Render(@<MudDialogProvider>
            <ProjectTimeEntryDialog
                Project="project"
                AvailableTimeSlices="slices"
                OnTimeSliceAssigned="EventCallback.Factory.Create<GetTimeSliceModel>(this, _ => Task.CompletedTask)" />
        </MudDialogProvider>);

        // Assert
        cut.Markup.Contains($"Assign Time Entry to <b>{project.Name}</b>");
        cut.Markup.Contains("01.01 09:00 - 10:30");
        cut.Markup.Contains("1 hour 30 minutes");
    }

   

    [Fact]
    public void DisplaysFallbackTextWhenNoTimeEntries()
    {
        // Arrange
        var project = CreateSampleProject();

        // Act
        var cut = Render(@<MudDialogProvider>
            <ProjectTimeEntryDialog
                Project="project"
                AvailableTimeSlices="new List<GetTimeSliceModel>()"
                OnTimeSliceAssigned="EventCallback.Factory.Create<GetTimeSliceModel>(this, _ => Task.CompletedTask)" />
        </MudDialogProvider>);

        // Assert
        cut.Markup.Contains("No available time entries.");
    }
}

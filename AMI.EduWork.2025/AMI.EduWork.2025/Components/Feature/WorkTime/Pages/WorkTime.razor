@page "/worktime"
@using AMI.EduWork._2025.Domain.Interfaces.Service
@using AMI.EduWork._2025.Domain.Models.TimeSlice
@using AMI.EduWork._2025.Domain.Models.User
@using AMI.EduWork._2025.Components.Feature.WorkTime.Components
@inject IServiceScopeFactory ServiceScopeFactory
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@implements IDisposable

@attribute [Authorize]

<!-- TOP BAR -->
<MudPaper Class="d-flex align-center justify-space-between" Style="padding:8px;">
    @if (IsRecording)
    {
        <MudText Typo="Typo.h6" Class="ml-2" Style="font-family:monospace;">
            <b>Time slice recording:</b>
            <span style="margin-left:16px;">@_elapsed.ToString(@"hh\:mm\:ss")</span>
        </MudText>
        <MudIconButton Icon="@Icons.Material.Filled.Stop" Color="Color.Error" Size="Size.Large" OnClick="StopTimer" />
    }
    else
    {
        <MudButton Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialogAsync">
            Add slice manually
        </MudButton>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6" Class="mr-2" Style="font-family:monospace;">
                @_elapsed.ToString(@"hh\:mm\:ss")
            </MudText>
            <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" Color="Color.Primary" Size="Size.Large" OnClick="StartTimer" />
        </div>
    }
</MudPaper>

<!-- DATE NAVIGATION BAR -->
<MudPaper Class="d-flex align-center justify-space-between" Style="background-color:slategrey; padding:8px;">
    <div style="width: 180px;"></div>
    <div class="d-flex align-center" style="gap: 8px;">
        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" Color="Color.Inherit" OnClick="PreviousDate" />
        <MudText Typo="Typo.h6" Style="font-weight:bold; color:white;">
            @currentDate?.ToString("dd.MM.yyyy")
        </MudText>
        <MudIconButton Icon="@Icons.Material.Filled.ChevronRight" Color="Color.Inherit" OnClick="NextDate" />
    </div>
    <div style="flex: 0 0 auto;">
        <MudDatePicker Date="@currentDate"
                       DateChanged="OnDateChanged"
                       DateFormat="dd.MM.yyyy" 
                       Style="font-weight:bold; color:white;" />
    </div>
</MudPaper>

<!-- MAIN CONTENT -->
<MudGrid Class="mt-4" Style="height:400px;">
    <MudItem xs="12" md="8">
        <MudContainer>
            <MudGrid Spacing="2">
                @if (timeslices != null)
                {
                    @foreach (var timeslice in timeslices)
                    {
                        <MudItem xs="12">
                            <TimeSliceCard TimeSlice="timeslice" OnEditRequested="OpenUpdateDialog" OnTimeSlicesChanged="GetAllUserTimeSlicesByDate" />
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudContainer>
    </MudItem>
    
    <MudItem xs="12" md="4">
        <MudPaper Class="pa-4" Style="height:100%; background-color:#444444; color:white;">
            <!-- TODO statistics -->
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    private DateTime? currentDate = DateTime.Today;
    public DateTime nonNullableDate => currentDate ?? DateTime.Today;
    private List<GetTimeSliceModel> timeslices;
    private string firstUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadFirstUser();
        await GetAllUserTimeSlicesByDate();
    }

    private async Task LoadFirstUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        firstUser = user.FindFirst(ClaimTypes.NameIdentifier)?.Value
                  ?? user.FindFirst("sub")?.Value
                  ?? string.Empty;
    }

    protected async Task GetAllUserTimeSlicesByDate()
    {
        if (firstUser == null) return;
        using var scope = ServiceScopeFactory.CreateScope();
        var _timeSliceService = scope.ServiceProvider.GetRequiredService<ITimeSliceService>();
        var result = await _timeSliceService.GetAllUserTimeSlicesByDate(firstUser, nonNullableDate);
        timeslices = result?.ToList() ?? new List<GetTimeSliceModel>();
    }

    private Task OpenAddDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };

        var parameters = new DialogParameters 
        { 
            ["Date"] = nonNullableDate,
            ["OnTimeSlicesChanged"] = EventCallback.Factory.Create(this, GetAllUserTimeSlicesByDate)
        }; 
        return DialogService.ShowAsync<AddTimeSliceManual>("Add Time Slice", parameters);
    }

    private async Task OnDateChanged(DateTime? newDate)
    {
        currentDate = newDate;
        await GetAllUserTimeSlicesByDate();
    }

    private async Task PreviousDate()
    {
        currentDate = currentDate?.AddDays(-1);
        await GetAllUserTimeSlicesByDate();
    }

    private async Task NextDate()
    {
        currentDate = currentDate?.AddDays(1);
        await GetAllUserTimeSlicesByDate();
    }
    //-----------------------------------------
    private System.Timers.Timer? _timer;
    private TimeSpan _elapsed = TimeSpan.Zero;
    private bool IsRecording = false;

    private void StartTimer()
    {
        if (IsRecording)
            return;

        IsRecording = true;
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += OnTimedEvent;
        _timer.AutoReset = true;
        _timer.Start();
    }

    private async void StopTimer()
    {
        IsRecording = false;
        _timer?.Stop();
        _timer?.Dispose();
        _timer = null;
        await InvokeAsync(StateHasChanged);
        await ShowAddTimeSliceDialogAsync();
    }

    private void OnTimedEvent(object? sender, System.Timers.ElapsedEventArgs e)
    {
        _elapsed = _elapsed.Add(TimeSpan.FromSeconds(1));
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    public void CancelTimer() => _elapsed = TimeSpan.Zero;

    private async Task ShowAddTimeSliceDialogAsync()
    {
        var parameters = new DialogParameters
        {
            ["TimerElapsed"] = _elapsed,
            ["OnCancel"] = EventCallback.Factory.Create(this, CancelTimer),
            ["OnContinue"] = EventCallback.Factory.Create(this, StartTimer),
            ["Date"] = nonNullableDate,
            ["OnTimeSlicesChanged"] = EventCallback.Factory.Create(this, GetAllUserTimeSlicesByDate)
        };

        DialogService.Show<AddTimeSliceTimer>("Add a Time Slice", parameters);
        

    }
    //-----------------------------------------

    private async Task OpenUpdateDialog(GetTimeSliceModel timeSlice)
    {
        var parameters = new DialogParameters 
        { 
            ["TimeSlice"] = timeSlice,
            ["OnTimeSlicesChanged"] = EventCallback.Factory.Create(this, GetAllUserTimeSlicesByDate)
        };
        await DialogService.ShowAsync<UpdateTimeSlice>("Update Time Slice", parameters);
    }
}

@using AMI.EduWork._2025.Domain.Models.TimeSlice
@using AMI.EduWork._2025.Domain.Models.Project
@using MudBlazor

<MudDialog MaxWidth="MaxWidth.Medium" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">Assign Time Entry to <b>@Project.Name</b></MudText>
    </TitleContent>

    <DialogContent>
        <MudList T="string">
            @if (AvailableTimeSlices?.Any() == true)
            {
                @foreach (var slice in AvailableTimeSlices)
                {
                    <MudListItem>
                        <MudText>
                            @slice.Start?.ToString("dd.MM.yyyy HH:mm") - @slice.End?.ToString("HH:mm")
                           
                             <MudChip T="string" Color="Color.Surface">
                        @GetDuration(slice)
                    </MudChip>
                        </MudText>
                        <MudButton Color="Color.Primary" OnClick="() => AssignToProject(slice)">Assign</MudButton>
                    </MudListItem>
                }
            }
            else
            {
                <MudText>No available time entries.</MudText>
            }
        </MudList>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public required GetProjectModel Project { get; set; }
    [Parameter] public required List<GetTimeSliceModel> AvailableTimeSlices { get; set; }
    [Parameter] public EventCallback<GetTimeSliceModel> OnTimeSliceAssigned { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private async Task AssignToProject(GetTimeSliceModel slice)
    {
        slice.ProjectId = Project.Id;

        await OnTimeSliceAssigned.InvokeAsync(slice);
        MudDialog.Close(DialogResult.Ok(slice));
    }
    private string FormatTimeSpan(TimeSpan span)
    {
        if (span.Hours > 0 && span.Minutes > 0)
            return $"{span.Hours} hour{(span.Hours == 1 ? "" : "s")} {span.Minutes} minute{(span.Minutes == 1 ? "" : "s")}";
        if (span.Hours > 0)
            return $"{span.Hours} hour{(span.Hours == 1 ? "" : "s")}";
        return $"{span.Minutes} minute{(span.Minutes == 1 ? "" : "s")}";
    }
    private string GetDuration(GetTimeSliceModel slice)
    {
        if (slice.Start.HasValue && slice.End.HasValue)
        {
            var dur = slice.End.Value - slice.Start.Value;
            return FormatTimeSpan(dur);
        }
        return "Unknown";
    }
}

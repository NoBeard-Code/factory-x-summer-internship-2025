@using AMI.EduWork._2025.Domain.Models.Project
@using MudBlazor

<MudTextField @bind-Value="_searchText"
              Label="Search projects..."
              Variant="Variant.Outlined"
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Class="mb-4" />

<MudSelect T="byte?" @bind-Value="_selectedType" Label="Filter by project type" Variant="Variant.Outlined" Class="mb-4">
    <MudSelectItem T="byte?" Value="null">All types</MudSelectItem>
    <MudSelectItem T="byte?" Value="(byte)0">Private</MudSelectItem>
    <MudSelectItem T="byte?" Value="(byte)1">Business</MudSelectItem>
    <MudSelectItem T="byte?" Value="(byte)2">Educational</MudSelectItem>
</MudSelect>


<MudList T="GetProjectModel" Dense="true">
    @if (Projects != null)
    {
        var filtered = Projects
            .Where(p =>
                (string.IsNullOrWhiteSpace(_searchText) ||
                 p.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                 p.Description.Contains(_searchText, StringComparison.OrdinalIgnoreCase)) &&
                (!_selectedType.HasValue || p.TypeOfProject == _selectedType.Value))
            .ToList();

        if (filtered.Any())
        {
            @foreach (var project in filtered)
            {
                <MudListItem T="GetProjectModel" Value="project">
                    <MudText Typo="Typo.h6">@project.Name</MudText>
                    <MudText Typo="Typo.body2">@project.Description</MudText>

                    <MudChip T="string" Color="@GetChipColor(project.TypeOfProject)">
                        @GetProjectTypeName(project.TypeOfProject)
                    </MudChip>

                    <MudButton OnClick="() => OnDetailsClicked.InvokeAsync(project)"
                               Variant="Variant.Outlined"
                               Color="Color.Primary"
                               Class="mt-2">
                        Details
                    </MudButton>
                </MudListItem>
            }
        }
        else
        {
            <MudText Class="pa-2">No results found.</MudText>
        }
    }
    else
    {
        <MudProgressCircular Indeterminate />
    }
</MudList>

@code {
    [Parameter] public List<GetProjectModel>? Projects { get; set; }
    [Parameter] public EventCallback<GetProjectModel> OnDetailsClicked { get; set; }

    private string _searchText = string.Empty;
    private byte? _selectedType = null;

    private string GetProjectTypeName(byte type) => type switch
    {
        0 => "Private",
        1 => "Business",
        2 => "Educational",
        _ => "Unknown"
    };

    private Color GetChipColor(byte type) => type switch
    {
        0 => Color.Dark,
        1 => Color.Primary,
        2 => Color.Info,
        _ => Color.Default
    };
}

@page "/projects"
@using AMI.EduWork._2025.Components.Feature.Project.Components
@using AMI.EduWork._2025.Domain.Interfaces.Service
@using AMI.EduWork._2025.Domain.Models.Project
@using AMI.EduWork._2025.Domain.Models.TimeSlice
@using AMI.EduWork._2025.Domain.Models.UserOnProject
@using Microsoft.AspNetCore.Authorization
@inject IProjectService ProjectService
@inject IUserOnProjectService UserOnProjectService
@inject ITimeSliceService TimeSliceService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@rendermode InteractiveServer
@attribute [Authorize]
<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">My projects</MudText>
    <ProjectList Projects="userProjects" OnDetailsClicked="ShowDetails" />

    <MudDivider Class="my-4" />

    <MudButton OnClick="OpenDialogAsync" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
        Novi Projekt
    </MudButton>

    <ProjectCreateComponent OnProjectCreated="LoadUserProjects" />

    <MudGrid Class="mt-4">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h4">All Time Project Time</MudText>
            <MudChart Class="pa-8 mt-4" ChartType="ChartType.Donut"
                      Width="400px" Height="400px"
                      InputData="@allTimeData"
                      InputLabels="@allTimeLabels">
                <CustomGraphics>
                    <text x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="20">Total</text>
                    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="40">
                        @allTimeData.Sum().ToString("0.##") hours
                    </text>
                </CustomGraphics>
            </MudChart>
        </MudItem>

        <MudItem xs="12" md="6">
            <MudDatePicker Date="_selectedMonth"
               DateChanged="OnMonthChanged"
               PickerVariant="PickerVariant.Inline"
               Label="Odaberi mjesec"
               Margin="Margin.Dense"
               Class="mb-2" />


            <MudChart Class="pa-8 mt-4" ChartType="ChartType.Donut"
                      Width="400px" Height="400px"
                      InputData="@monthlyData"
                      InputLabels="@monthlyLabels">
                <CustomGraphics>
                    <text x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="20">Total</text>
                    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-size="40">
                        @monthlyData.Sum().ToString("0.##") hours
                    </text>
                </CustomGraphics>
            </MudChart>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    private List<GetProjectModel>? userProjects;
    private GetProjectModel? selectedProject;
    private string? userId;

    private Dictionary<string, List<float>> timeSlicesByProject = new();

    private double[] allTimeData = Array.Empty<double>();
    private string[] allTimeLabels = Array.Empty<string>();

    private double[] monthlyData = Array.Empty<double>();
    private string[] monthlyLabels = Array.Empty<string>();

    private DateTime _selectedMonth = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst("sub")?.Value 
                  ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        await LoadUserProjects();
        await SetupChartData();
    }

    private async Task LoadUserProjects()
    {
        if (userId != null)
        {
            var userOnProjects = await UserOnProjectService.GetProjectsByUserId(userId);
            var timeSlices = await TimeSliceService.GetAllUserTimeSlices(userId);

            var projectIds = userOnProjects.Select(uop => uop.Project.Id).Distinct().ToList();
            userProjects = new List<GetProjectModel>();
            timeSlicesByProject.Clear();

            foreach (var projectId in projectIds)
            {
                var project = await ProjectService.GetById(projectId);
                if (project != null)
                {
                    var projectTimeSlices = timeSlices
                        .Where(ts => ts.ProjectId == projectId && ts.Start.HasValue && ts.End.HasValue)
                        .ToList();

                    var durations = projectTimeSlices
                        .Select(ts => (float)(ts.End.Value - ts.Start.Value).TotalHours)
                        .ToList();

                    var key = $"{project.Name}-({GetProjectTypeName(project.TypeOfProject)})-{project.Id}";
                    timeSlicesByProject[key] = durations;

                    project.TimeSlices = projectTimeSlices;
                    userProjects.Add(project);
                }
            }
        }
    }

    private async Task SetupChartData()
    {
        // All-time data
        allTimeLabels = timeSlicesByProject.Keys
            .Select(key => key.Split("-(")[0])
            .ToArray();

        allTimeData = timeSlicesByProject.Values
            .Select(list => Math.Round(list.Sum(), 2))
            .ToArray();

        // Monthly data
        var selectedMonth = _selectedMonth.Month;
        var selectedYear = _selectedMonth.Year;

        var monthlyDurations = new Dictionary<string, double>();

        foreach (var project in userProjects ?? new())
        {
            var key = $"{project.Name}-({GetProjectTypeName(project.TypeOfProject)})-{project.Id}";

            var monthTotal = (project.TimeSlices ?? new())
                .Where(ts => ts.Start.HasValue && ts.End.HasValue &&
                             ts.Start.Value.Month == selectedMonth &&
                             ts.Start.Value.Year == selectedYear)
                .Sum(ts => (ts.End!.Value - ts.Start!.Value).TotalHours);

            if (monthTotal > 0)
                monthlyDurations[key] = Math.Round(monthTotal, 2);
        }

        monthlyLabels = monthlyDurations.Keys
            .Select(key => key.Split("-(")[0])
            .ToArray();

        monthlyData = monthlyDurations.Values.ToArray();
    }

    private async Task OnMonthChanged(DateTime? date)
    {
        if (date is not null)
        {
            _selectedMonth = date.Value;
            await SetupChartData();
            StateHasChanged();
        }
    }

    private Task ShowDetails(GetProjectModel project)
    {
        selectedProject = project;

        var dialogParameters = new DialogParameters
        {
            { "Project", selectedProject }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.False,
            FullWidth = true,
            FullScreen = false,
            CloseOnEscapeKey = true,
            Position = DialogPosition.Center
        };

        return DialogService.ShowAsync<ProjectDetailsDialog>("Project Details", dialogParameters, options);
    }

    private Task OpenDialogAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { "OnProjectCreated", EventCallback.Factory.Create<ProjectModel>(this, CreateUserProjects) }
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        return DialogService.ShowAsync<ProjectCreateDialog>("Dodaj Projekt", dialogParameters, options);
    }

    private Task ErrorDialogAsync(String message)
    {
        var dialogParameters = new DialogParameters
        {
            { "Message", message}
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            MaxWidth = MaxWidth.Small,
            FullWidth = true,
            Position = DialogPosition.Center,
        };

        return DialogService.ShowAsync<ErrorDialog>("Dodaj Projekt", dialogParameters, options);
    }

    private async Task CreateUserProjects(ProjectModel project)
    {
        if (userId == null)
            return;
        try
        {
            await ProjectService.Create(project);
        }catch(Exception e)
        {
            await ErrorDialogAsync(e.Message);
            return;
        }
        
        var createdProject = await ProjectService.GetProjectByName(project.Name);
        await UserOnProjectService.Create(new UserOnProjectModel
        {
            UserId = userId,
            ProjectId = createdProject.Id,
            ProjectRole = project.TypeOfProject.ToString()
        });

        await LoadUserProjects();
        await SetupChartData();
    }

    private string GetProjectTypeName(byte type) => type switch
    {
        0 => "Privatni",
        1 => "Poslovni",
        2 => "Edukacijski",
        _ => "Nepoznat"
    };
}

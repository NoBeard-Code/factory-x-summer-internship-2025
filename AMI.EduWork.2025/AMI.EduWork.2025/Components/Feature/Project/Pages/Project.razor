@page "/projects"
@using AMI.EduWork._2025.Components.Feature.Project.Components
@using AMI.EduWork._2025.Domain.Interfaces.Service
@using AMI.EduWork._2025.Domain.Models.Project
@using AMI.EduWork._2025.Domain.Models.TimeSlice
@using AMI.EduWork._2025.Domain.Models.UserOnProject
@inject IProjectService ProjectService
@inject IUserOnProjectService UserOnProjectService
@inject ITimeSliceService TimeSliceService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDialogService DialogService
@rendermode InteractiveServer


<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Moji Projekti</MudText>
 <ProjectList Projects="userProjects" OnDetailsClicked="ShowDetails" />

    <MudDivider Class="my-4" />
    <MudButton OnClick="OpenDialogAsync" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">
        Novi Projekt
    </MudButton>

    <ProjectCreateComponent OnProjectCreated="LoadUserProjects" />
    <MudChart Class="pa-8 mt-8" ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
        <CustomGraphics>
            <text class="donut-inner-text" x="50%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="20">Total</text>
            <text class="donut-inner-text" x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="50">@data.Sum().ToString() sati</text>
        </CustomGraphics>
    </MudChart>
</MudPaper>

@code {
    private List<GetProjectModel>? userProjects;
    private GetProjectModel? selectedProject;
    private TimeSliceModel? selectedTimeslice;
    private Dictionary<string, List<float>> timeSlicesByProject = new();

    public double[] data = { };

    public string[] labels = { };


    private string? userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            userId = user.FindFirst("sub")?.Value 
                  ?? user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        await LoadUserProjects();
    }


    private async Task LoadUserProjects()
{
    if (userId != null)
    {
        var userOnProjects = await UserOnProjectService.GetProjectsByUserId(userId);
        var timeSlices = await TimeSliceService.GetAllUserTimeSlices(userId);

        var projectIds = userOnProjects.Select(uop => uop.Project.Id).Distinct().ToList();
        userProjects = new List<GetProjectModel>();
        timeSlicesByProject.Clear();

        foreach (var projectId in projectIds)
        {
            var project = await ProjectService.GetById(projectId);
            if (project != null)
            {
                var projectTimeSlices = timeSlices
                    .Where(ts => ts.ProjectId == projectId && ts.Start.HasValue && ts.End.HasValue)
                    .ToList();

               
                var durations = projectTimeSlices
                    .Select(ts => (float)(ts.End.Value - ts.Start.Value).TotalHours)
                    .ToList();

                timeSlicesByProject[project.Name] = durations;

                project.TimeSlices = projectTimeSlices;
                userProjects.Add(project);
            }
        }

        
        data = timeSlicesByProject.Values
            .Select(list => Math.Round(list.Sum(), 2))
            .ToArray();

        labels = timeSlicesByProject.Keys.ToArray();
    }
}


    private async Task CreateUserProjects(ProjectModel project)
    {
        if(userId == null)
        {
            return;
        }
         await ProjectService.Create(project);
         var createdProject = await ProjectService.GetProjectByName(project.Name);
         await UserOnProjectService.Create(new UserOnProjectModel
         {
             UserId = userId,
             ProjectId = createdProject.Id,
             ProjectRole = project.TypeOfProject.ToString()
         });
         await LoadUserProjects();

    }

    private int UsersOnProjectCount()
    {
        if(selectedProject == null)
        {
            return 0;
        }
        return selectedProject.UsersOnProjects?.Count != null ? selectedProject.UsersOnProjects.Count : 1;
    }

   private Task ShowDetails(GetProjectModel project)
{
    selectedProject = project; 

    var dialogParameters = new DialogParameters
    {
        { "Project", selectedProject } 
    };

    var options = new DialogOptions
{
    MaxWidth = MaxWidth.False, 
    FullWidth = true,
    
    FullScreen = false,
    CloseOnEscapeKey = true,
    Position = DialogPosition.Center
};


    return DialogService.ShowAsync<ProjectDetailsDialog>("Detalji projekta", dialogParameters, options);
}

    

     private Task OpenDialogAsync()
    {
        var dialogParameters = new DialogParameters
        {
            { "OnProjectCreated", EventCallback.Factory.Create<ProjectModel>(this, CreateUserProjects) }
        };
        var options = new DialogOptions
     {
        CloseOnEscapeKey = true,
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        Position = DialogPosition.Center,

      }  ;


        return DialogService.ShowAsync<ProjectCreateDialog>("Styling Example Dialog", dialogParameters, options);
    }



    private string GetProjectTypeName(byte type)
    {
        return type switch
        {
            0 => "Privatni",
            1 => "Poslovni",
            2 => "Edukacijski",
            _ => "Nepoznat"
        };
    }
}

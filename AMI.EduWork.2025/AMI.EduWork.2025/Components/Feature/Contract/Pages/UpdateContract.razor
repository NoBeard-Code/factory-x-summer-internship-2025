@page "/contracts/update/{contractId}"
@using AMI.EduWork._2025.Domain.Interfaces.Service
@using AMI.EduWork._2025.Domain.Models.ContractModel
@using AMI.EduWork._2025.Domain.Models.User
@rendermode InteractiveServer
@inject IContractService icontractService
@inject IUserService iuserService
@inject NavigationManager Navigation

<h3>Update contract</h3>

<div class="col-md-4">
    <EditForm method="post" Model="contractUpdateModel" OnValidSubmit="updateContract" FormName="Update" Enhance>
        <div class="mb-3">
            <labe1 for="WorkingHour" class="form-label">Working hour</labe1>
            <InputNumber id="WorkingHour" @bind-Value="contractUpdateModel.WorkingHour" class="form-control" />
        </div>
        <div class="mb-3">
            <labe1 for="HourlyRate" class="form-label">Hourly rate</labe1>
            <InputNumber id="HourlyRate" @bind-Value="contractUpdateModel.HourlyRate" class="form-control" />
        </div>
        <div class="mb-3">
            <labe1 for="Created" class="form-label">Date of creation</labe1>
            <InputDate id="Created" @bind-Value="contractUpdateModel.Created" class="form-control" />
        </div>
        <div class="mb-3">
            <labe1 for="IsActive" class="form-label">Is active</labe1>
            <InputCheckbox id="IsActive" @bind-Value="contractUpdateModel.IsActive" />
        </div>
        <div class="mb-3">
            <label for="user">Select user:</label>
            <select id="user" class="form-select" @bind="contractUpdateModel.UserId">
                @foreach (var user in getUserModel)
                {
                    <option id="@user.Id" value="@user.Id">@user.UserName</option>
                }
            </select>
        </div>

        <button class="btn btn-primary" type="submit">Apply changes</button>
        <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>

    </EditForm>
</div>

@code {
    [Parameter]
    public string contractId { get; set; }
    [SupplyParameterFromForm]
    private ContractUpdateModel contractUpdateModel { get; set; } = new ContractUpdateModel();
    private List<GetUserModel> getUserModel { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        ContractGetModel contractGetModel = await icontractService.GetById(contractId);
        contractUpdateModel = new ContractUpdateModel
        {
            Id = contractGetModel.Id,
            UserId = contractGetModel._GetUserModel.Id,
            IsActive = contractGetModel.IsActive,
            HourlyRate = contractGetModel.HourlyRate,
            WorkingHour = contractGetModel.WorkingHour
        };

        IEnumerable<GetUserModel> _getUserModel = await iuserService.GetAll();
        getUserModel = _getUserModel.ToList();
    }

    private async Task updateContract()
    {
        await icontractService.Update(contractUpdateModel);
        Navigation.NavigateTo("/contracts");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/contracts");
    }
}

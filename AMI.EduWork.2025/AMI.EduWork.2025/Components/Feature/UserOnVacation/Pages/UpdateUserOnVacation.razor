@page "/userOnVacation/update/{userOnVacationId}"
@using AMI.EduWork._2025.Domain.Interfaces.Service
@using AMI.EduWork._2025.Domain.Models.ContractModel
@using AMI.EduWork._2025.Domain.Models.User
@using AMI.EduWork._2025.Domain.Models.UserOnVacationModel
@using AMI.EduWork._2025.Domain.Models.VacationModel
@rendermode InteractiveServer
@inject IUserService iuserService
@inject IUserOnVacationService iuserOnVacationService
@inject IVacationService ivacationService
@inject NavigationManager Navigation

<h3>Update vacation for user</h3>

<div class="col-md-4">
    <EditForm method="post" Model="userOnVacationUpdateModel" OnValidSubmit="Update" FormName="Update" Enhance>

        @if (vacationGetModel.Any())
        {
            <div class="mb-3">
                <label for="vacationUpdateModel.AnnualVacationId">Select annual vacation:</label>
                <select class="form-select" @bind="userOnVacationUpdateModel.AnnualVacationId">
                    <option value="">-- Choose --</option>
                    @foreach (var vacation in vacationGetModel)
                    {
                        <option id="@vacation.Id" value="@vacation.Id">@vacation.Year | @vacation.AvailableVacation </option>
                    }
                </select>
            </div>

            <div class="mb-3">
                <labe1 for="StartDate" class="form-label">Start date</labe1>
                <InputDate id="StartDate" @bind-Value="userOnVacationUpdateModel.StartDate" class="form-control" />
            </div>
            <div class="mb-3">
                <labe1 for="EndDate" class="form-label">End date</labe1>
                <InputDate id="EndDate" @bind-Value="userOnVacationUpdateModel.EndDate" class="form-control" />
            </div>

            var _vacation = vacationGetModel.FirstOrDefault(x => x.Id == userOnVacationUpdateModel.AnnualVacationId);

            if (_vacation is not null && _vacation.Year == userOnVacationUpdateModel.StartDate.Year)
            {
                <button class="btn btn-primary" type="submit">Save</button>

            }
            else
            {
                <div class="text-warning">Year from chosen vacation has to be equal to chosen year!</div>

            }

        }
        else
        {
            <div class="text-warning">You need to define annual vacation in other to add it to user!</div>
            <a class="btn btn-primary" href="/vacation/create">Create annual vacation</a>
        }
        <button class="btn btn-secondary" type="button" @onclick="Cancel">Cancel</button>
    </EditForm>
</div>


@code {
    [Parameter]
    public string userOnVacationId { get; set; }
    public UserOnVacationUpdateModel userOnVacationUpdateModel { get; set; } = new();
    private List<VacationGetModel> vacationGetModel { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        IEnumerable<VacationGetModel> _vacationGetModel = await ivacationService.GetAll();
        vacationGetModel = _vacationGetModel.ToList();
    }
    protected override async Task OnParametersSetAsync()
    {
        UserOnVacationGetModel _userOnVacationGetModel = await iuserOnVacationService.GetById(userOnVacationId);
         userOnVacationUpdateModel = new UserOnVacationUpdateModel{
            Id = _userOnVacationGetModel.Id,
            AnnualVacationId = _userOnVacationGetModel._VacationGetModel.Id,
            UserId = _userOnVacationGetModel._GetUserModel.Id,
            StartDate = _userOnVacationGetModel.StartDate,
            EndDate = _userOnVacationGetModel.EndDate,
        };

    }
    private async Task Update()
    {
        await iuserOnVacationService.Update(userOnVacationUpdateModel);
        Navigation.NavigateTo("/userOnVacation");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/userOnVacation");
    }
}
